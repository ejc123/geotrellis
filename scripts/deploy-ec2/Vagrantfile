# -*- mode: ruby -*-
# vi: set ft=ruby :

def local_ip
  `which ipconfig`

  if $?.exitstatus == 0
    `ipconfig getifaddr en0`
  else
    `ip -o -4 addr list eth0 | awk '{print $4}' | cut -d/ -f1`
  end.strip
end

VAGRANTFILE_API_VERSION = "2"
SPARK_WORKERS=2
SPARK_WORKER_DISKS = 2

Vagrant.configure(VAGRANTFILE_API_VERSION) do |cluster|
  cluster.vm.box = "ubuntu/precise64"

  # Enable host manager
  cluster.hostmanager.enabled = true

  # Wire up the proxy
  if Vagrant.has_plugin?("vagrant-proxyconf")
    cluster.proxy.http     = "http://#{local_ip}:8123/"
    cluster.proxy.https    = "http://#{local_ip}:8123/"
    cluster.proxy.no_proxy = "localhost,127.0.0.1,*.maven.org,repo.typesafe.com,repo.scala-sbt.org,oss.sonatype.org"
  end

  cluster.vm.define "master" do |machine|
    machine.vm.hostname = "master"
    machine.vm.synced_folder "../../", "/home/vagrant/geotrellis"
    machine.vm.synced_folder "~/.ivy2", "/home/vagrant/.ivy2"
    machine.vm.network "private_network", ip: "33.33.33.10"

    machine.vm.provider "virtualbox" do |v|
      v.memory = 2048
      v.cpus = 2
    end
  end

  workers = []
  (11..(10+SPARK_WORKERS)).each_with_index do |last_octet, index|
    index = index + 1
    workers.push("worker-#{index}")

    cluster.vm.define "worker-#{index}" do |machine|
      machine.vm.hostname = "worker-#{index}"
      machine.vm.network "private_network", ip: "33.33.33.#{last_octet}"

      machine.vm.provider "virtualbox" do |v|
        v.memory = 2048
        v.cpus = 2

        (1..SPARK_WORKER_DISKS).each do |disk_index|
          v.customize ["createhd", "--filename", ".vagrant/worker-#{index}-disk-0#{disk_index}.vdi", "--size", 10000]
          v.customize ["storageattach", :id, "--storagectl", "SATAController", "--port", 3 + disk_index,
            "--device", 0, "--type", "hdd", "--medium", ".vagrant/worker-#{index}-disk-0#{disk_index}.vdi"]
        end
      end

      if (index) == SPARK_WORKERS
        machine.vm.provision "ansible" do |ansible|
          ansible.playbook = "./setup-cluster.yml"
          ansible.groups = {
            "master" => [ "master" ],
            "workers" => workers,
            "development:children" => [ "master", "workers" ]
          }
          ansible.limit = "development"
        end
      end
    end
  end
end
